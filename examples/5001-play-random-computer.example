===== id
5001

===== Name
Play Random Computer

===== DescriptionMD
You can integrate chessboardjs2 with the [chess.js library](https://github.com/jhlywa/chess.js) to play against random moves.

===== HTML
<!--
<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.13.4/chess.js" integrity="sha384-L0SnMpUnYUX6GNzeu549NqRJHDc9gljfSbFwmJFLZRNJiKLrLI+W9Cpw/DgHy5Vu" crossorigin="anonymous"></script>
-->
<script src="js/chess-0.10.2.min.js"></script>
<!-- <div id="myBoard" style="width: 400px"></div> -->
<div id="myBoard"></div>

===== JS
// This example uses the chess.js library:
// https://github.com/jhlywa/chess.js

// NOTE: the game object is separate from the board object
// the game object:
// - controls the state of the game
// - understands how pieces move and what moves are legal
// - knows who's turn it is
// - en passant, castling, draw logic, etc
const game = new Chess()

// the board object is "dumb":
// - reflects the current position
// - handles input events from users
const boardConfig = {
  draggable: true, // FIXME: <-- need to implement this
  onDragStart: onDragStart,
  onTouchSquare: onTouchSquare,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd,
  position: 'start',
  touchMove: true
}
const board = Chessboard2('myBoard', boardConfig)

let pendingMoveFromSquare = null

// There are 5 outcomes from this action:
// - start a pending move
// - clear a pending move
// - clear a pending move AND start a different pending move
// - make a move (ie: complete their pending move)
// - do nothing
function onTouchSquare (square, piece, boardInfo) {
  // ask chess.js what legal moves are available from this square
  const legalMoves = game.moves({ square: square, verbose: true })
  // console.log('legalMoves:', legalMoves)

  if (pendingMoveFromSquare) {
    // ask chess.js to make a move
    const moveResult = game.move({ from: pendingMoveFromSquare, to: square })

    // was this a legal move?
    if (moveResult) {
      // FIXME: if you flip these two calls, there is a rendering bug
      // need to be able to update the board while an animation is happening

      // clear any highlights
      board.clearCircles()

      // update the board position
      board.position(game.fen())
    } else if (piece && legalMoves.length > 0) {
      board.clearCircles()
      // reset the pending move to this new square
      pendingMoveFromSquare = square
      legalMoves.forEach(m => {
        board.addCircle(m.to)
      })
      // FIXME: highlight square here
    } else {
      pendingMoveFromSquare = null
      board.clearCircles()
      // TODO: clear any move highlights here
    }
    // else if there is a piece on the square
  } else if (piece && legalMoves.length > 0) {
    pendingMoveFromSquare = square
    legalMoves.forEach(m => {
      board.addCircle(m.to)
    })
    // FIXME: highlight square here
  }
}

function onDragStart (source, piece, position, orientation) {
  // do not pick up pieces if the game is over
  if (game.game_over()) return false

  // only pick up pieces for White
  if (piece.search(/^b/) !== -1) return false
}

function makeRandomMove () {
  var possibleMoves = game.moves()

  // game over
  if (possibleMoves.length === 0) return

  var randomIdx = Math.floor(Math.random() * possibleMoves.length)
  game.move(possibleMoves[randomIdx])
  board.position(game.fen())
}

function onDrop (source, target) {
  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: 'q' // NOTE: always promote to a queen for example simplicity
  })

  // illegal move
  if (move === null) return 'snapback'

  // make random legal move for black
  window.setTimeout(makeRandomMove, 250)
}

// update the board position after the piece snap
// for castling, en passant, pawn promotion
function onSnapEnd () {
  board.position(game.fen())
}
