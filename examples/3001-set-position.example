===== id
3001-set-position

===== Name
Set Position

===== DescriptionMD

Use the [.position()], [.setPosition()], [.fen()], [.start()], or [.clear()] methods to
set the board position.

[.position()]:docs.html#methods:position
[.setPosition()]:docs.html#methods:setPosition
[.fen()]:docs.html#methods:fen
[.start()]:docs.html#methods:start
[.clear()]:docs.html#methods:clear

===== HTML
<div id="myBoard" style="width: 400px"></div>
<button id="setStartBtn">Start Position</button>
<button id="setRuyLopezBtn">Ruy Lopez</button>
<button id="setRookCheckmateBtn">Rook Checkmate</button>
<button id="pawnAttackBtn">Pawn Attack!</button>

<button id="clearBoardBtn">Clear Board</button>
<button id="setPawns3">Pawn Attack 2!</button>

<button id="setWithCallback">Set Position with Callback</button>
<button id="setWithAnimateSpeed">Queen's Gambit (Set Position with Animate Speed)</button>
<button id="setWithPromise">Queen's Gambit Accepted (Set Position returns a Promise)</button>
<button id="setWithObject">Queen's Gambit Declined (Set Position with an Object)</button>

<!-- TODO: move these to a Cypress test -->
<button id="testBtn1">Test 1</button>
<button id="testBtn2">Test 2</button>

===== JS
const board = Chessboard2('myBoard')

attachEvent('setStartBtn', 'click', () => {
  board.start()
})

const ruyLopez = 'r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R'
const queensGambit = 'rnbqkbnr/ppp1pppp/8/3p4/2PP4/8/PP2PPPP/RNBQKBNR'
const queensGambitAccepted = 'rnbqkbnr/ppp2ppp/8/8/2pP4/8/PP2PPPP/RNBQKBNR'
const queensGambitDeclined = 'rnbqkbnr/ppp2ppp/4p3/3p4/2PP4/8/PP2PPPP/RNBQKBNR'

attachEvent('setRuyLopezBtn', 'click', () => {
  board.position('r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R')
})

attachEvent('setRookCheckmateBtn', 'click', () => {
  board.position({
    a4: 'bK',
    c4: 'wK',
    a7: 'wR'
  })
})

let pawnToggle = true

attachEvent('pawnAttackBtn', 'click', () => {
  if (pawnToggle) {
    board.fen('pppppppp/pppppppp/pppppppp/pppppppp/PPPPPPPP/PPPPPPPP/PPPPPPPP/PPPPPPPP')
    pawnToggle = false
  } else {
    board.fen('PPPPPPPP/PPPPPPPP/PPPPPPPP/PPPPPPPP/pppppppp/pppppppp/pppppppp/pppppppp')
    pawnToggle = true
  }
})

attachEvent('clearBoardBtn', 'click', () => {
  board.clear()
})

let pawnToggle2 = true
attachEvent('setPawns3', 'click', () => {
  if (pawnToggle2) {
    board.fen('pPpPpPpP/PpPpPpPp/pPpPpPpP/PpPpPpPp/pPpPpPpP/PpPpPpPp/pPpPpPpP/PpPpPpPp')
    pawnToggle2 = false
  } else {
    board.fen('PpPpPpPp/pPpPpPpP/PpPpPpPp/pPpPpPpP/PpPpPpPp/pPpPpPpP/PpPpPpPp/pPpPpPpP')
    pawnToggle2 = true
  }
})

attachEvent('setWithCallback', 'click', () => {
  board.position(ruyLopez, (positionInfo) => {
    console.log('Animations have finished:', positionInfo)
  })
})

attachEvent('setWithAnimateSpeed', 'click', () => {
  board.position(queensGambit, 'super slow')
})

attachEvent('setWithPromise', 'click', () => {
  board.position(queensGambitAccepted).then(info => {
    console.log('Animations have finished:', info)
  })
})

attachEvent('setWithObject', 'click', () => {
  board.fen(queensGambitDeclined, {
    animateSpeed: 800,
    onComplete: function (posInfo) {
      console.log('Animations have finished:', posInfo)
    }
  })
})






attachEvent('testBtn1', 'click', () => {
  board.position('r1bqkbnr/pppp1ppp/n7/4p3/3P4/4P3/PPP2PPP/RNBQKBNR')
})

attachEvent('testBtn2', 'click', () => {
  board.position('r1bqkbnr/pppp1ppp/B7/4p3/3P4/4P3/PPP2PPP/RNBQK1NR')
})
